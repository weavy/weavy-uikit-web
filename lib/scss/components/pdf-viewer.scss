/* Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// CSS from ~~pdfjs-dist/web/pdf_viewer.css~~~
// CSS from https://github.com/mozilla/pdf.js/blob/master/web/
// - Disable any images.
// - Change any :root {} to @at-root :host { ... } so they're not scoped by a selector
// - Place the code within @mixin defaults { ... }

@mixin defaults {
  @include text-layer;
  @include annotation-layer;
  @include xfa-layer;
  @include pdf-viewer;
}

@mixin text-layer {
  .textLayer {
    position: absolute;
    text-align: initial;
    inset: 0;
    overflow: clip;
    opacity: 1;
    line-height: 1;
    text-size-adjust: none;
    forced-color-adjust: none;
    transform-origin: 0 0;
    caret-color: CanvasText;
    z-index: 0;

    &.highlighting {
      touch-action: none;
    }

    :is(span, br) {
      color: transparent;
      position: absolute;
      white-space: pre;
      cursor: text;
      transform-origin: 0% 0%;
    }

    > :not(.markedContent),
    .markedContent span:not(.markedContent) {
      z-index: 1;
    }

    /* Only necessary in Google Chrome, see issue 14205, and most unfortunately
     * the problem doesn't show up in "text" reference tests. */
    /*#if !MOZCENTRAL*/
    span.markedContent {
      top: 0;
      height: 0;
    }
    /*#endif*/

    span[role="img"] {
      user-select: none;
      cursor: default;
    }

    .highlight {
      --highlight-bg-color: rgb(180 0 170 / 0.25);
      --highlight-selected-bg-color: rgb(0 100 0 / 0.25);
      --highlight-backdrop-filter: none;
      --highlight-selected-backdrop-filter: none;

      @media screen and (forced-colors: active) {
        --highlight-bg-color: transparent;
        --highlight-selected-bg-color: transparent;
        --highlight-backdrop-filter: var(--hcm-highlight-filter);
        --highlight-selected-backdrop-filter: var(--hcm-highlight-selected-filter);
      }

      & {
        margin: -1px;
        padding: 1px;
        background-color: var(--highlight-bg-color);
        backdrop-filter: var(--highlight-backdrop-filter);
        border-radius: 4px;
      }

      &.appended {
        position: initial;
      }

      &.begin {
        border-radius: 4px 0 0 4px;
      }

      &.end {
        border-radius: 0 4px 4px 0;
      }

      &.middle {
        border-radius: 0;
      }

      &.selected {
        background-color: var(--highlight-selected-bg-color);
        backdrop-filter: var(--highlight-selected-backdrop-filter);
      }
    }

    ::selection {
      /* stylelint-disable declaration-block-no-duplicate-properties */
      /*#if !MOZCENTRAL*/
      background: rgba(0 0 255 / 0.25);
      /*#endif*/
      /* stylelint-enable declaration-block-no-duplicate-properties */
      background: color-mix(in srgb, AccentColor, transparent 75%);
    }

    /* Avoids https://github.com/mozilla/pdf.js/issues/13840 in Chrome */
    /*#if !MOZCENTRAL*/
    br::selection {
      background: transparent;
    }
    /*#endif*/

    .endOfContent {
      display: block;
      position: absolute;
      inset: 100% 0 0;
      z-index: 0;
      cursor: default;
      user-select: none;
    }

    &.selecting .endOfContent {
      top: 0;
    }
  }
}

@mixin annotation-layer {
  .annotationLayer {
    --annotation-unfocused-field-background: url("data:image/svg+xml;charset=UTF-8,<svg width='1px' height='1px' xmlns='http://www.w3.org/2000/svg'><rect width='100%' height='100%' style='fill:rgba(0, 54, 255, 0.13);'/></svg>");
    --input-focus-border-color: Highlight;
    --input-focus-outline: 1px solid Canvas;
    --input-unfocused-border-color: transparent;
    --input-disabled-border-color: transparent;
    --input-hover-border-color: black;
    --link-outline: none;

    @media screen and (forced-colors: active) {
      --input-focus-border-color: CanvasText;
      --input-unfocused-border-color: ActiveText;
      --input-disabled-border-color: GrayText;
      --input-hover-border-color: Highlight;
      --link-outline: 1.5px solid LinkText;

      .textWidgetAnnotation :is(input, textarea):required,
      .choiceWidgetAnnotation select:required,
      .buttonWidgetAnnotation:is(.checkBox, .radioButton) input:required {
        outline: 1.5px solid selectedItem;
      }

      .linkAnnotation {
        outline: var(--link-outline);

        &:hover {
          backdrop-filter: var(--hcm-highlight-filter);
        }

        & > a:hover {
          opacity: 0 !important;
          background: none !important;
          box-shadow: none;
        }
      }

      .popupAnnotation .popup {
        outline: calc(1.5px * var(--scale-factor)) solid CanvasText !important;
        background-color: ButtonFace !important;
        color: ButtonText !important;
      }

      .highlightArea:hover::after {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        backdrop-filter: var(--hcm-highlight-filter);
        content: "";
        pointer-events: none;
      }

      .popupAnnotation.focused .popup {
        outline: calc(3px * var(--scale-factor)) solid Highlight !important;
      }
    }

    & {
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none;
      transform-origin: 0 0;
    }

    &[data-main-rotation="90"] .norotate {
      transform: rotate(270deg) translateX(-100%);
    }
    &[data-main-rotation="180"] .norotate {
      transform: rotate(180deg) translate(-100%, -100%);
    }
    &[data-main-rotation="270"] .norotate {
      transform: rotate(90deg) translateY(-100%);
    }

    &.disabled {
      section,
      .popup {
        pointer-events: none;
      }
    }

    .annotationContent {
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;

      &.freetext {
        background: transparent;
        border: none;
        inset: 0;
        overflow: visible;
        white-space: nowrap;
        font: 10px sans-serif;
        line-height: 1.35;
        user-select: none;
      }
    }

    section {
      position: absolute;
      text-align: initial;
      pointer-events: auto;
      box-sizing: border-box;
      transform-origin: 0 0;

      &:has(div.annotationContent) {
        canvas.annotationContent {
          display: none;
        }
      }
    }

    .textLayer.selecting ~ & section {
      pointer-events: none;
    }

    :is(.linkAnnotation, .buttonWidgetAnnotation.pushButton) > a {
      position: absolute;
      font-size: 1em;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    :is(.linkAnnotation, .buttonWidgetAnnotation.pushButton):not(.hasBorder) > a:hover {
      opacity: 0.2;
      background-color: rgb(255 255 0);
      box-shadow: 0 2px 10px rgb(255 255 0);
    }

    .linkAnnotation.hasBorder:hover {
      background-color: rgb(255 255 0 / 0.2);
    }

    .hasBorder {
      background-size: 100% 100%;
    }

    .textAnnotation img {
      position: absolute;
      cursor: pointer;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }

    .textWidgetAnnotation :is(input, textarea),
    .choiceWidgetAnnotation select,
    .buttonWidgetAnnotation:is(.checkBox, .radioButton) input {
      background-image: var(--annotation-unfocused-field-background);
      border: 2px solid var(--input-unfocused-border-color);
      box-sizing: border-box;
      font: calc(9px * var(--scale-factor)) sans-serif;
      height: 100%;
      margin: 0;
      vertical-align: top;
      width: 100%;
    }

    .textWidgetAnnotation :is(input, textarea):required,
    .choiceWidgetAnnotation select:required,
    .buttonWidgetAnnotation:is(.checkBox, .radioButton) input:required {
      outline: 1.5px solid red;
    }

    .choiceWidgetAnnotation select option {
      padding: 0;
    }

    .buttonWidgetAnnotation.radioButton input {
      border-radius: 50%;
    }

    .textWidgetAnnotation textarea {
      resize: none;
    }

    .textWidgetAnnotation :is(input, textarea)[disabled],
    .choiceWidgetAnnotation select[disabled],
    .buttonWidgetAnnotation:is(.checkBox, .radioButton) input[disabled] {
      background: none;
      border: 2px solid var(--input-disabled-border-color);
      cursor: not-allowed;
    }

    .textWidgetAnnotation :is(input, textarea):hover,
    .choiceWidgetAnnotation select:hover,
    .buttonWidgetAnnotation:is(.checkBox, .radioButton) input:hover {
      border: 2px solid var(--input-hover-border-color);
    }
    .textWidgetAnnotation :is(input, textarea):hover,
    .choiceWidgetAnnotation select:hover,
    .buttonWidgetAnnotation.checkBox input:hover {
      border-radius: 2px;
    }

    .textWidgetAnnotation :is(input, textarea):focus,
    .choiceWidgetAnnotation select:focus {
      background: none;
      border: 2px solid var(--input-focus-border-color);
      border-radius: 2px;
      outline: var(--input-focus-outline);
    }

    .buttonWidgetAnnotation:is(.checkBox, .radioButton) :focus {
      background-image: none;
      background-color: transparent;
    }

    .buttonWidgetAnnotation.checkBox :focus {
      border: 2px solid var(--input-focus-border-color);
      border-radius: 2px;
      outline: var(--input-focus-outline);
    }

    .buttonWidgetAnnotation.radioButton :focus {
      border: 2px solid var(--input-focus-border-color);
      outline: var(--input-focus-outline);
    }

    .buttonWidgetAnnotation.checkBox input:checked::before,
    .buttonWidgetAnnotation.checkBox input:checked::after,
    .buttonWidgetAnnotation.radioButton input:checked::before {
      background-color: CanvasText;
      content: "";
      display: block;
      position: absolute;
    }

    .buttonWidgetAnnotation.checkBox input:checked::before,
    .buttonWidgetAnnotation.checkBox input:checked::after {
      height: 80%;
      left: 45%;
      width: 1px;
    }

    .buttonWidgetAnnotation.checkBox input:checked::before {
      transform: rotate(45deg);
    }

    .buttonWidgetAnnotation.checkBox input:checked::after {
      transform: rotate(-45deg);
    }

    .buttonWidgetAnnotation.radioButton input:checked::before {
      border-radius: 50%;
      height: 50%;
      left: 25%;
      top: 25%;
      width: 50%;
    }

    .textWidgetAnnotation input.comb {
      font-family: monospace;
      padding-left: 2px;
      padding-right: 0;
    }

    .textWidgetAnnotation input.comb:focus {
      /*
        * Letter spacing is placed on the right side of each character. Hence, the
        * letter spacing of the last character may be placed outside the visible
        * area, causing horizontal scrolling. We avoid this by extending the width
        * when the element has focus and revert this when it loses focus.
        */
      width: 103%;
    }

    .buttonWidgetAnnotation:is(.checkBox, .radioButton) input {
      appearance: none;
    }

    .fileAttachmentAnnotation .popupTriggerArea {
      height: 100%;
      width: 100%;
    }

    .popupAnnotation {
      position: absolute;
      font-size: calc(9px * var(--scale-factor));
      pointer-events: none;
      width: max-content;
      max-width: 45%;
      height: auto;
    }

    .popup {
      background-color: rgb(255 255 153);
      box-shadow: 0 calc(2px * var(--scale-factor)) calc(5px * var(--scale-factor)) rgb(136 136 136);
      border-radius: calc(2px * var(--scale-factor));
      outline: 1.5px solid rgb(255 255 74);
      padding: calc(6px * var(--scale-factor));
      cursor: pointer;
      font: message-box;
      white-space: normal;
      word-wrap: break-word;
      pointer-events: auto;
    }

    .popupAnnotation.focused .popup {
      outline-width: 3px;
    }

    .popup * {
      font-size: calc(9px * var(--scale-factor));
    }

    .popup > .header {
      display: inline-block;
    }

    .popup > .header h1 {
      display: inline;
    }

    .popup > .header .popupDate {
      display: inline-block;
      margin-left: calc(5px * var(--scale-factor));
      width: fit-content;
    }

    .popupContent {
      border-top: 1px solid rgb(51 51 51);
      margin-top: calc(2px * var(--scale-factor));
      padding-top: calc(2px * var(--scale-factor));
    }

    .richText > * {
      white-space: pre-wrap;
      font-size: calc(9px * var(--scale-factor));
    }

    .popupTriggerArea {
      cursor: pointer;
    }

    section svg {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }

    .annotationTextContent {
      position: absolute;
      width: 100%;
      height: 100%;
      opacity: 0;
      color: transparent;
      user-select: none;
      pointer-events: none;

      span {
        width: 100%;
        display: inline-block;
      }
    }

    svg.quadrilateralsContainer {
      contain: strict;
      width: 0;
      height: 0;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
    }
  }
}

@mixin xfa-layer {
  @at-root :host {
    --xfa-unfocused-field-background: url("data:image/svg+xml;charset=UTF-8,<svg width='1px' height='1px' xmlns='http://www.w3.org/2000/svg'><rect width='100%' height='100%' style='fill:rgba(0, 54, 255, 0.13);'/></svg>");
    --xfa-focus-outline: auto;
  }

  @media screen and (forced-colors: active) {
    @at-root :host {
      --xfa-focus-outline: 2px solid CanvasText;
    }
    .xfaLayer *:required {
      outline: 1.5px solid selectedItem;
    }
  }

  .xfaLayer {
    background-color: transparent;
  }

  .xfaLayer .highlight {
    margin: -1px;
    padding: 1px;
    background-color: rgb(239 203 237);
    border-radius: 4px;
  }

  .xfaLayer .highlight.appended {
    position: initial;
  }

  .xfaLayer .highlight.begin {
    border-radius: 4px 0 0 4px;
  }

  .xfaLayer .highlight.end {
    border-radius: 0 4px 4px 0;
  }

  .xfaLayer .highlight.middle {
    border-radius: 0;
  }

  .xfaLayer .highlight.selected {
    background-color: rgb(203 223 203);
  }

  .xfaPage {
    overflow: hidden;
    position: relative;
  }

  .xfaContentarea {
    position: absolute;
  }

  .xfaPrintOnly {
    display: none;
  }

  .xfaLayer {
    position: absolute;
    text-align: initial;
    top: 0;
    left: 0;
    transform-origin: 0 0;
    line-height: 1.2;
  }

  .xfaLayer * {
    color: inherit;
    font: inherit;
    font-style: inherit;
    font-weight: inherit;
    font-kerning: inherit;
    letter-spacing: -0.01px;
    text-align: inherit;
    text-decoration: inherit;
    box-sizing: border-box;
    background-color: transparent;
    padding: 0;
    margin: 0;
    pointer-events: auto;
    line-height: inherit;
  }

  .xfaLayer *:required {
    outline: 1.5px solid red;
  }

  .xfaLayer div,
  .xfaLayer svg,
  .xfaLayer svg * {
    pointer-events: none;
  }

  .xfaLayer a {
    color: blue;
  }

  .xfaRich li {
    margin-left: 3em;
  }

  .xfaFont {
    color: black;
    font-weight: normal;
    font-kerning: none;
    font-size: 10px;
    font-style: normal;
    letter-spacing: 0;
    text-decoration: none;
    vertical-align: 0;
  }

  .xfaCaption {
    overflow: hidden;
    flex: 0 0 auto;
  }

  .xfaCaptionForCheckButton {
    overflow: hidden;
    flex: 1 1 auto;
  }

  .xfaLabel {
    height: 100%;
    width: 100%;
  }

  .xfaLeft {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .xfaRight {
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
  }

  :is(.xfaLeft, .xfaRight) > :is(.xfaCaption, .xfaCaptionForCheckButton) {
    max-height: 100%;
  }

  .xfaTop {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  .xfaBottom {
    display: flex;
    flex-direction: column-reverse;
    align-items: flex-start;
  }

  :is(.xfaTop, .xfaBottom) > :is(.xfaCaption, .xfaCaptionForCheckButton) {
    width: 100%;
  }

  .xfaBorder {
    background-color: transparent;
    position: absolute;
    pointer-events: none;
  }

  .xfaWrapped {
    width: 100%;
    height: 100%;
  }

  :is(.xfaTextfield, .xfaSelect):focus {
    background-image: none;
    background-color: transparent;
    outline: var(--xfa-focus-outline);
    outline-offset: -1px;
  }

  :is(.xfaCheckbox, .xfaRadio):focus {
    outline: var(--xfa-focus-outline);
  }

  .xfaTextfield,
  .xfaSelect {
    height: 100%;
    width: 100%;
    flex: 1 1 auto;
    border: none;
    resize: none;
    background-image: var(--xfa-unfocused-field-background);
  }

  .xfaSelect {
    padding-inline: 2px;
  }

  :is(.xfaTop, .xfaBottom) > :is(.xfaTextfield, .xfaSelect) {
    flex: 0 1 auto;
  }

  .xfaButton {
    cursor: pointer;
    width: 100%;
    height: 100%;
    border: none;
    text-align: center;
  }

  .xfaLink {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }

  .xfaCheckbox,
  .xfaRadio {
    width: 100%;
    height: 100%;
    flex: 0 0 auto;
    border: none;
  }

  .xfaRich {
    white-space: pre-wrap;
    width: 100%;
    height: 100%;
  }

  .xfaImage {
    object-position: left top;
    object-fit: contain;
    width: 100%;
    height: 100%;
  }

  .xfaLrTb,
  .xfaRlTb,
  .xfaTb {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  .xfaLr {
    display: flex;
    flex-direction: row;
    align-items: stretch;
  }

  .xfaRl {
    display: flex;
    flex-direction: row-reverse;
    align-items: stretch;
  }

  .xfaTb > div {
    justify-content: left;
  }

  .xfaPosition {
    position: relative;
  }

  .xfaArea {
    position: relative;
  }

  .xfaValignMiddle {
    display: flex;
    align-items: center;
  }

  .xfaTable {
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  .xfaTable .xfaRow {
    display: flex;
    flex-direction: row;
    align-items: stretch;
  }

  .xfaTable .xfaRlRow {
    display: flex;
    flex-direction: row-reverse;
    align-items: stretch;
    flex: 1;
  }

  .xfaTable .xfaRlRow > div {
    flex: 1;
  }

  :is(.xfaNonInteractive, .xfaDisabled, .xfaReadOnly) :is(input, textarea) {
    background: initial;
  }

  @media print {
    .xfaTextfield,
    .xfaSelect {
      background: transparent;
    }

    .xfaSelect {
      appearance: none;
      text-indent: 1px;
      text-overflow: "";
    }
  }
}

@mixin pdf-viewer {
  //@import url(message_bar.css);
  //@import url(dialog.css);
  //@import url(text_layer_builder.css);
  //@import url(annotation_layer_builder.css);
  //@import url(xfa_layer_builder.css);
  /* Ignored in GECKOVIEW builds: */
  //@import url(annotation_editor_layer_builder.css);

  @at-root :host {
    --viewer-container-height: 0;
    --pdfViewer-padding-bottom: 0;
    --page-margin: 1px auto -8px;
    --page-border: 9px solid transparent;
    --spreadHorizontalWrapped-margin-LR: -3.5px;
    --loading-icon-delay: 400ms;
  }

  @media screen and (forced-colors: active) {
    @at-root :host {
      --pdfViewer-padding-bottom: 9px;
      --page-margin: 8px auto -1px;
      --page-border: 1px solid CanvasText;
      --spreadHorizontalWrapped-margin-LR: 3.5px;
    }
  }

  [data-main-rotation="90"] {
    transform: rotate(90deg) translateY(-100%);
  }
  [data-main-rotation="180"] {
    transform: rotate(180deg) translate(-100%, -100%);
  }
  [data-main-rotation="270"] {
    transform: rotate(270deg) translateX(-100%);
  }

  #hiddenCopyElement,
  .hiddenCanvasElement {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    display: none;
  }

  .pdfViewer {
    /* Define this variable here and not in :root to avoid to reflow all the UI
      when scaling (see #15929). */
    --scale-factor: 1;
    --page-bg-color: unset;

    padding-bottom: var(--pdfViewer-padding-bottom);

    --hcm-highlight-filter: none;
    --hcm-highlight-selected-filter: none;

    @media screen and (forced-colors: active) {
      --hcm-highlight-filter: invert(100%);
    }

    &.copyAll {
      cursor: wait;
    }

    .canvasWrapper {
      overflow: hidden;
      width: 100%;
      height: 100%;

      canvas {
        position: absolute;
        top: 0;
        left: 0;
        margin: 0;
        display: block;
        width: 100%;
        height: 100%;
        contain: content;

        .structTree {
          contain: strict;
        }
      }
    }
  }

  .pdfViewer .page {
    --scale-round-x: 1px;
    --scale-round-y: 1px;

    direction: ltr;
    width: 816px;
    height: 1056px;
    margin: var(--page-margin);
    position: relative;
    overflow: visible;
    border: var(--page-border);
    background-clip: content-box;
    background-color: var(--page-bg-color, rgb(255 255 255));
  }

  .pdfViewer .dummyPage {
    position: relative;
    width: 0;
    height: var(--viewer-container-height);
  }

  .pdfViewer.noUserSelect {
    user-select: none;
  }

  /*#if GENERIC*/
  .pdfViewer.removePageBorders .page {
    margin: 0 auto 10px;
    border: none;
  }
  /*#endif*/

  /*#if COMPONENTS*/
  .pdfViewer.singlePageView {
    display: inline-block;
  }

  .pdfViewer.singlePageView .page {
    margin: 0;
    border: none;
  }
  /*#endif*/

  .pdfViewer:is(.scrollHorizontal, .scrollWrapped),
  .spread {
    margin-inline: 3.5px;
    text-align: center;
  }

  .pdfViewer.scrollHorizontal,
  .spread {
    white-space: nowrap;
  }

  /*#if GENERIC*/
  .pdfViewer.removePageBorders,
 /*#endif*/
 .pdfViewer:is(.scrollHorizontal, .scrollWrapped) .spread {
    margin-inline: 0;
  }

  .spread :is(.page, .dummyPage),
  .pdfViewer:is(.scrollHorizontal, .scrollWrapped) :is(.page, .spread) {
    display: inline-block;
    vertical-align: middle;
  }

  .spread .page,
  .pdfViewer:is(.scrollHorizontal, .scrollWrapped) .page {
    margin-inline: var(--spreadHorizontalWrapped-margin-LR);
  }

  /*#if GENERIC*/
  .pdfViewer.removePageBorders .spread .page,
  .pdfViewer.removePageBorders:is(.scrollHorizontal, .scrollWrapped) .page {
    margin-inline: 5px;
  }
  /*#endif*/

  .pdfViewer .page.loadingIcon::after {
    position: absolute;
    top: 0;
    left: 0;
    content: "";
    width: 100%;
    height: 100%;
    //background: url("images/loading-icon.gif") center no-repeat;
    display: none;
    /* Using a delay with background-image doesn't work,
      consequently we use the display. */
    transition-property: display;
    transition-delay: var(--loading-icon-delay);
    z-index: 5;
    contain: strict;
  }

  .pdfViewer .page.loading::after {
    display: block;
  }

  .pdfViewer .page:not(.loading)::after {
    transition-property: none;
    display: none;
  }

  .pdfPresentationMode .pdfViewer {
    padding-bottom: 0;
  }

  .pdfPresentationMode .spread {
    margin: 0;
  }

  .pdfPresentationMode .pdfViewer .page {
    margin: 0 auto;
    border: 2px solid transparent;
  }
}
